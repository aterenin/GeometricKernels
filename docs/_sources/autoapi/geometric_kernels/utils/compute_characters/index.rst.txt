geometric_kernels.utils.compute_characters
==========================================

.. py:module:: geometric_kernels.utils.compute_characters

.. autoapi-nested-parse::

   Standalone script to precompute characters for
   :class:`~.spaces.SpecialOrthogonal` and :class:`~.spaces.SpecialUnitary`.

   Edit `recalculate`, `storage_file_name`, `order`, and `groups` variables below
   in the code and run the script as.

   .. code-block:: bash

       python compute_characters.py







Module Contents
---------------

.. py:class:: CompactJSONEncoder(*args, **kwargs)

   Bases: :py:obj:`json.JSONEncoder`


   A JSON Encoder that puts small containers on single lines.

   Source (probably):
   https://gist.github.com/jannismain/e96666ca4f059c3e5bc28abb711b5c92.


   .. py:method:: __init__(*args, **kwargs)

      Constructor for JSONEncoder, with sensible defaults.

      If skipkeys is false, then it is a TypeError to attempt
      encoding of keys that are not str, int, float or None.  If
      skipkeys is True, such items are simply skipped.

      If ensure_ascii is true, the output is guaranteed to be str
      objects with all incoming non-ASCII characters escaped.  If
      ensure_ascii is false, the output can contain non-ASCII characters.

      If check_circular is true, then lists, dicts, and custom encoded
      objects will be checked for circular references during encoding to
      prevent an infinite recursion (which would cause an RecursionError).
      Otherwise, no such check takes place.

      If allow_nan is true, then NaN, Infinity, and -Infinity will be
      encoded as such.  This behavior is not JSON specification compliant,
      but is consistent with most JavaScript based encoders and decoders.
      Otherwise, it will be a ValueError to encode such floats.

      If sort_keys is true, then the output of dictionaries will be
      sorted by key; this is useful for regression tests to ensure
      that JSON serializations can be compared on a day-to-day basis.

      If indent is a non-negative integer, then JSON array
      elements and object members will be pretty-printed with that
      indent level.  An indent level of 0 will only insert newlines.
      None is the most compact representation.

      If specified, separators should be an (item_separator, key_separator)
      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
      (',', ': ') otherwise.  To get the most compact JSON representation,
      you should specify (',', ':') to eliminate whitespace.

      If specified, default is a function that gets called for objects
      that can't otherwise be serialized.  It should return a JSON encodable
      version of the object or raise a ``TypeError``.




   .. py:method:: encode(o)

      Encode JSON object *o* with respect to single line lists.



   .. py:method:: iterencode(o, **kwargs)

      Required to also work with `json.dump`.



   .. py:attribute:: CONTAINER_TYPES

      Container datatypes include primitives or other containers.



   .. py:attribute:: MAX_ITEMS
      :value: 70


      Maximum number of items in container that might be put on single line.



   .. py:attribute:: MAX_WIDTH
      :value: 70


      Maximum width of a container that might be put on a single line.



.. py:function:: compute_character_formula_so(self, signature)

   Refer to the appendix of cite:t:`azangulov2022`,
   https://arxiv.org/pdf/2208.14960.pdf.


.. py:function:: compute_character_formula_su(self, signature)

   Refer to the appendix of cite:t:`azangulov2022`,
   https://arxiv.org/pdf/2208.14960.pdf.


